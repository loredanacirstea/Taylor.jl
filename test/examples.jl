examples1 = [
    """(= 3 3)""",
    # """(+ 3 -4)""",
    """(* 5 9)""",
    """(/ 5 9)""",
    """(< 5 9)""",
    """(>= 5 5)""",
    """(list 1 2 3 "a")""",
    """(vector 1 2 3)""",
    """(cons 4 (list 1 2))""",
    """(concat (list 1 2) (list 5 6) (list 10 12))""",
    """(nth (list 5 7 3 10) 2)""",
    """(first (list 5 7 3 10))""",
    """(rest (list 5 7 3 10))""",
    """(count [5 3])""",
    """(hash-map "akey" "avalue" "a" 2)""",
    """(assoc {:c 7 "akey" "avalue" "a" 2} "b" 4)""",
    """(dissoc {"akey" "avalue" "a" 2} "a")""",
    """(get {"akey" "avalue" "a" 2} "akey")""",
    """(contains? {"akey" "avalue" "a" 2} "akey")""",
    """(keys {"akey" "avalue" "a" 2})""",
    """(vals {"akey" "avalue" "a" 2})""",
    """(> (time-ms) 151990332)""",
    """(str "A " "string" ".")""",
    """(pr-str "ola")""",
    """(prn "check" "browser" "console")""",
    """(println "check" "browser" "console")""",
    """(nil? nil)""",
    """(nil? 4)""",
    """(true? false)""",
    """(true? true)""",
    """(number? 10)""",
    """(number? "hello")""",
    """(string? "hello")""",
    """(string? 4)""",
    """(symbol? (symbol "asymbol"))""",
    """(keyword? (keyword "ola"))""",
    """(fn? prn)""",
    """(list? (list 1 2 3 "a"))""",
    """(vector? (vector 1 2 3))""",
    """(map? (hash-map "akey" "avalue" "a" 2))""",
    """(empty? (list))""",
    """(map (fn* (n) (+ n 10)) [5 3])""",
    """(apply (fn* (a b) (+ a b)) [5 3])""",
    """(conj (list 6 4 8) 4 7 11)""",
    """(seq "Vector or list or string results in a list")""",
    """(js-eval "2 + 4")""",
    """(js-eval "let myobj = { v: 10, myfunc: function(a,b,c) { return a * b * c * this.v; } }")""",
    """(. "myobj.myfunc" 2 3 4)""",
    """(let* (a (+ 4 6) b (* 4 6)) (if (> b a) "hello" "ola"))""",
    """(nth (list (def! func-name (fn* (a b) (list (+ a b) 0 0 0))) (func-name 2 3)) 1)""",
]
