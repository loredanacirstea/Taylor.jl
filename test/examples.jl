examples1 = [
    ("""(= 3 3)""", "true"),
    ("""(+ 3 -4)""", "-1"),
    ("""(* 5 9)""", "45"),
    ("""(/ 5 9)""", "0"),
    ("""(< 5 9)""", "true"),
    ("""(>= 5 5)""", "true"),
    ("""(list 1 2 3 "a")""", """(1 2 3 "a")"""),
    ("""(vector 1 2 3)""", "[1 2 3]"),
    ("""(cons 4 (list 1 2))""", "(4 1 2)"),
    ("""(concat (list 1 2) (list 5 6) (list 10 12))""", "(1 2 5 6 10 12)"),
    ("""(nth (list 5 7 3 10) 2)""", "3"),
    ("""(first (list 5 7 3 10))""", "5"),
    ("""(rest (list 5 7 3 10))""", "(7 3 10)"),
    ("""(count [5 3])""", "2"),
    ("""(hash-map "akey" "avalue" "a" 2)""", """{"a" 2 "akey" "avalue"}"""),
    ("""(assoc {:c 7 "akey" "avalue" "a" 2} "b" 4)""", """{:c 7 "akey" "avalue" "a" 2 "b" 4}"""),
    ("""(dissoc {"akey" "avalue" "a" 2} "a")""", """{"akey" "avalue"}"""),
    ("""(get {"akey" "avalue" "a" 2} "akey")""", """\"avalue\""""),
    ("""(contains? {"akey" "avalue" "a" 2} "akey")""", "true"),
    ("""(keys {"akey" "avalue" "a" 2})""", """("akey" "a")"""),
    ("""(vals {"akey" "avalue" "a" 2})""", """("avalue" 2)"""),
    ("""(> (time-ms) 151990332)""", "true"),
    ("""(str "A " "string" ".")""", """"A string.\""""),
    ("""(pr-str "ola")""", """ "\"ola\"" """),
    ("""(prn "check" "browser" "console")""", ""),
    # ("""(println "check" "browser" "console")""", "nil"),
    ("""(nil? nil)""", "true"),
    ("""(nil? 4)""", "false"),
    ("""(true? false)""", "false"),
    ("""(true? true)""", "true"),
    ("""(number? 10)""", "true"),
    ("""(number? "hello")""", "false"),
    ("""(string? "hello")""", "true"),
    ("""(string? 4)""", "false"),
    ("""(symbol? (symbol "asymbol"))""", "true"),
    ("""(keyword? (keyword "ola"))""", "true"),
    ("""(fn? prn)""", "true"),
    ("""(list? (list 1 2 3 "a"))""", "true"),
    ("""(vector? (vector 1 2 3))""", "true"),
    ("""(map? (hash-map "akey" "avalue" "a" 2))""", "true"),
    ("""(empty? (list))""", "true"),
    ("""(map (fn* (n) (+ n 10)) [5 3])""", "(15 13)"),
    ("""(apply (fn* (a b) (+ a b)) [5 3])""", "8"),
    ("""(conj (list 6 4 8) 4 7 11)""", "(11 7 4 6 4 8)"),
    ("""(seq "Vector or list or string results in a list")""", """("V" "e" "c" "t" "o" "r" " " "o" "r" " " "l" "i" "s" "t" " " "o" "r" " " "s" "t" "r" "i" "n" "g" " " "r" "e" "s" "u" "l" "t" "s" " " "i" "n" " " "a" " " "l" "i" "s" "t")"""),
    # ("""(js-eval "2 + 4")""", ""),
    # ("""(js-eval "let myobj = { v: 10, myfunc: function(a,b,c) { return a * b * c * this.v; } }")""", ""),
    # ("""(. "myobj.myfunc" 2 3 4)""", ""),
    ("""(let* (a (+ 4 6) b (* 4 6)) (if (> b a) "hello" "ola"))""", "\"hello\""),
    ("""(nth (list (def! func-name (fn* (a b) (list (+ a b) 0 0 0))) (func-name 2 3)) 1)""", "(5 0 0 0)"),
]
